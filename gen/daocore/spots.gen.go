// Code generated by "script/dtogen". DO NOT EDIT.
package daocore

import (
	"context"
	"database/sql"
	"strings"
	"time"

	"github.com/Masterminds/squirrel"

	"github.com/dena-gohost/gohost-server/pkg/dberror"
)

const SpotTableName = "spots"

var SpotAllColumns = []string{
	"id",
	"name",
	"description",
	"image_url",
	"address",
	"created_at",
	"updated_at",
}

var SpotColumnsWOMagics = []string{
	"id",
	"name",
	"description",
	"image_url",
	"address",
}

var SpotPrimaryKeyColumns = []string{
	"id",
}

type Spot struct {
	ID          string
	Name        string
	Description string
	ImageUrl    string
	Address     string
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
}

func (t *Spot) Values() []interface{} {
	return []interface{}{
		t.ID,
		t.Name,
		t.Description,
		t.ImageUrl,
		t.Address,
	}
}

func (t *Spot) SetMap() map[string]interface{} {
	return map[string]interface{}{
		"id":          t.ID,
		"name":        t.Name,
		"description": t.Description,
		"image_url":   t.ImageUrl,
		"address":     t.Address,
	}
}

func (t *Spot) Ptrs() []interface{} {
	return []interface{}{
		&t.ID,
		&t.Name,
		&t.Description,
		&t.ImageUrl,
		&t.Address,
		&t.CreatedAt,
		&t.UpdatedAt,
	}
}

func IterateSpot(sc interface{ Scan(...interface{}) error }) (Spot, error) {
	t := Spot{}
	if err := sc.Scan(t.Ptrs()...); err != nil {
		return Spot{}, dberror.MapError(err)
	}
	return t, nil
}

func SelectAllSpot(ctx context.Context, txn *sql.Tx) ([]*Spot, error) {
	query, params, err := squirrel.
		Select(SpotAllColumns...).
		From(SpotTableName).
		ToSql()
	if err != nil {
		return nil, dberror.MapError(err)
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return nil, dberror.MapError(err)
	}

	rows, err := stmt.QueryContext(ctx, params...)
	if err != nil {
		return nil, dberror.MapError(err)
	}
	res := make([]*Spot, 0)
	for rows.Next() {
		t, err := IterateSpot(rows)
		if err != nil {
			return nil, dberror.MapError(err)
		}
		res = append(res, &t)
	}
	return res, nil
}

func SelectSpotByName(ctx context.Context, txn *sql.Tx, name *string) ([]*Spot, error) {
	eq := squirrel.Eq{}
	if name != nil {
		eq["name"] = *name
	}
	query, params, err := squirrel.
		Select(SpotAllColumns...).
		From(SpotTableName).
		Where(eq).
		ToSql()
	if err != nil {
		return nil, dberror.MapError(err)
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return nil, dberror.MapError(err)
	}
	rows, err := stmt.QueryContext(ctx, params...)
	if err != nil {
		return nil, dberror.MapError(err)
	}
	res := make([]*Spot, 0)
	for rows.Next() {
		t, err := IterateSpot(rows)
		if err != nil {
			return nil, dberror.MapError(err)
		}
		res = append(res, &t)
	}
	return res, nil
}

func SelectOneSpotByID(ctx context.Context, txn *sql.Tx, id *string) (Spot, error) {
	eq := squirrel.Eq{}
	if id != nil {
		eq["id"] = *id
	}
	query, params, err := squirrel.
		Select(SpotAllColumns...).
		From(SpotTableName).
		Where(eq).
		ToSql()
	if err != nil {
		return Spot{}, dberror.MapError(err)
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return Spot{}, dberror.MapError(err)
	}
	return IterateSpot(stmt.QueryRowContext(ctx, params...))
}

func InsertSpot(ctx context.Context, txn *sql.Tx, records []*Spot) error {
	for i := range records {
		if records[i] == nil {
			records = append(records[:i], records[i+1:]...)
		}
	}
	if len(records) == 0 {
		return nil
	}
	sq := squirrel.Insert(SpotTableName).Columns(SpotColumnsWOMagics...)
	for _, r := range records {
		if r == nil {
			continue
		}
		sq = sq.Values(r.Values()...)
	}
	query, params, err := sq.ToSql()
	if err != nil {
		return err
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return dberror.MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return dberror.MapError(err)
	}
	return nil
}

func UpdateSpot(ctx context.Context, txn *sql.Tx, record Spot) error {
	sql, params, err := squirrel.Update(SpotTableName).SetMap(record.SetMap()).
		Where(squirrel.Eq{
			"id": record.ID,
		}).
		ToSql()
	if err != nil {
		return err
	}
	stmt, err := txn.PrepareContext(ctx, sql)
	if err != nil {
		return dberror.MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return dberror.MapError(err)
	}
	return nil
}

func UpsertSpot(ctx context.Context, txn *sql.Tx, record Spot) error {
	updateSQL, params, err := squirrel.Update(SpotTableName).SetMap(record.SetMap()).ToSql()
	if err != nil {
		return err
	}
	updateSQL = strings.TrimPrefix(updateSQL, "UPDATE "+SpotTableName+" SET ")
	query, params, err := squirrel.Insert(SpotTableName).Columns(SpotColumnsWOMagics...).Values(record.Values()...).SuffixExpr(squirrel.Expr("ON DUPLICATE KEY UPDATE "+updateSQL, params...)).ToSql()
	if err != nil {
		return err
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return dberror.MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return dberror.MapError(err)
	}
	return nil
}

func DeleteSpotByName(ctx context.Context, txn *sql.Tx, name *string) error {
	eq := squirrel.Eq{}
	if name != nil {
		eq["name"] = *name
	}

	query, params, err := squirrel.
		Delete(SpotTableName).
		Where(eq).
		ToSql()
	if err != nil {
		return dberror.MapError(err)
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return dberror.MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return dberror.MapError(err)
	}
	return nil
}

func DeleteOneSpotByID(ctx context.Context, txn *sql.Tx, id *string) error {
	eq := squirrel.Eq{}
	if id != nil {
		eq["id"] = *id
	}

	query, params, err := squirrel.
		Delete(SpotTableName).
		Where(eq).
		ToSql()
	if err != nil {
		return dberror.MapError(err)
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return dberror.MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return dberror.MapError(err)
	}
	return nil
}
